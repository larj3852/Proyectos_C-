

Microchip Technology PIC LITE Macro Assembler V1.45 build -152302408 
                                                                                               Thu Feb 07 11:03:17 2019

Microchip Technology Omniscient Code Generator v1.45 (Free mode) build 201711160504
     1                           	processor	16F887
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	strings,global,class=STRING,delta=2
     5                           	psect	cinit,global,class=CODE,merge=1,delta=2
     6                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
     7                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
     8                           	psect	maintext,global,class=CODE,split=1,delta=2
     9                           	psect	text1,local,class=CODE,merge=1,delta=2
    10                           	psect	text2,local,class=CODE,merge=1,delta=2
    11                           	psect	text3,local,class=CODE,merge=1,delta=2
    12                           	psect	text4,local,class=CODE,merge=1,delta=2
    13                           	psect	text5,local,class=CODE,merge=1,delta=2
    14                           	psect	text6,local,class=CODE,merge=1,delta=2
    15                           	psect	text7,local,class=CODE,merge=1,delta=2
    16                           	dabs	1,0x7E,2
    17  0000                     
    18                           ; Version 1.45
    19                           ; Generated 16/11/2017 GMT
    20                           ; 
    21                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    22                           ; All rights reserved.
    23                           ; 
    24                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    25                           ; 
    26                           ; Redistribution and use in source and binary forms, with or without modification, are
    27                           ; permitted provided that the following conditions are met:
    28                           ; 
    29                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    30                           ;        conditions and the following disclaimer.
    31                           ; 
    32                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    33                           ;        of conditions and the following disclaimer in the documentation and/or other
    34                           ;        materials provided with the distribution.
    35                           ; 
    36                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    37                           ;        software without specific prior written permission.
    38                           ; 
    39                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    40                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    41                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    42                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    43                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    44                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    45                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    46                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    47                           ; 
    48                           ; 
    49                           ; Code-generator required, PIC16F887 Definitions
    50                           ; 
    51                           ; SFR Addresses
    52  0000                     	;# 
    53  0001                     	;# 
    54  0002                     	;# 
    55  0003                     	;# 
    56  0004                     	;# 
    57  0005                     	;# 
    58  0006                     	;# 
    59  0007                     	;# 
    60  0008                     	;# 
    61  0009                     	;# 
    62  000A                     	;# 
    63  000B                     	;# 
    64  000C                     	;# 
    65  000D                     	;# 
    66  000E                     	;# 
    67  000E                     	;# 
    68  000F                     	;# 
    69  0010                     	;# 
    70  0011                     	;# 
    71  0012                     	;# 
    72  0013                     	;# 
    73  0014                     	;# 
    74  0015                     	;# 
    75  0015                     	;# 
    76  0016                     	;# 
    77  0017                     	;# 
    78  0018                     	;# 
    79  0019                     	;# 
    80  001A                     	;# 
    81  001B                     	;# 
    82  001B                     	;# 
    83  001C                     	;# 
    84  001D                     	;# 
    85  001E                     	;# 
    86  001F                     	;# 
    87  0081                     	;# 
    88  0085                     	;# 
    89  0086                     	;# 
    90  0087                     	;# 
    91  0088                     	;# 
    92  0089                     	;# 
    93  008C                     	;# 
    94  008D                     	;# 
    95  008E                     	;# 
    96  008F                     	;# 
    97  0090                     	;# 
    98  0091                     	;# 
    99  0092                     	;# 
   100  0093                     	;# 
   101  0093                     	;# 
   102  0093                     	;# 
   103  0094                     	;# 
   104  0095                     	;# 
   105  0096                     	;# 
   106  0097                     	;# 
   107  0098                     	;# 
   108  0099                     	;# 
   109  009A                     	;# 
   110  009B                     	;# 
   111  009C                     	;# 
   112  009D                     	;# 
   113  009E                     	;# 
   114  009F                     	;# 
   115  0105                     	;# 
   116  0107                     	;# 
   117  0108                     	;# 
   118  0109                     	;# 
   119  010C                     	;# 
   120  010C                     	;# 
   121  010D                     	;# 
   122  010E                     	;# 
   123  010F                     	;# 
   124  0185                     	;# 
   125  0187                     	;# 
   126  0188                     	;# 
   127  0189                     	;# 
   128  018C                     	;# 
   129  018D                     	;# 
   130  0008                     _PORTD	set	8
   131  0043                     _RD3	set	67
   132  0042                     _RD2	set	66
   133  0088                     _TRISD	set	136
   134  008F                     _OSCCON	set	143
   135  0189                     _ANSELH	set	393
   136                           
   137                           	psect	strings
   138  0003                     __pstrings:	
   139  0003                     stringtab:	
   140  0003                     __stringtab:	
   141  0003                     stringcode:	
   142                           ;	String table - string pointers are 1 byte each
   143                           
   144  0003                     stringdir:	
   145  0003  3000               	movlw	high stringdir
   146  0004  008A               	movwf	10
   147  0005  0804               	movf	4,w
   148  0006  0A84               	incf	4,f
   149  0007  0782               	addwf	2,f
   150  0008                     __stringbase:	
   151  0008  3400               	retlw	0
   152  0009                     __end_of__stringtab:	
   153  0009                     STR_1:	
   154  0009  3448               	retlw	72	;'H'
   155  000A  346F               	retlw	111	;'o'
   156  000B  346C               	retlw	108	;'l'
   157  000C  3461               	retlw	97	;'a'
   158  000D  3420               	retlw	32	;' '
   159  000E  346D               	retlw	109	;'m'
   160  000F  3475               	retlw	117	;'u'
   161  0010  346E               	retlw	110	;'n'
   162  0011  3464               	retlw	100	;'d'
   163  0012  346F               	retlw	111	;'o'
   164  0013  3400               	retlw	0
   165  0009                     
   166                           ; #config settings
   167  0000                     
   168                           	psect	cinit
   169  07FA                     start_initialization:	
   170  07FA                     __initialization:	
   171                           
   172                           ; Clear objects allocated to COMMON
   173  07FA  01FB               	clrf	__pbssCOMMON& (0+127)
   174  07FB  01FC               	clrf	(__pbssCOMMON+1)& (0+127)
   175  07FC                     end_of_initialization:	
   176                           ;End of C runtime variable initialization code
   177                           
   178  07FC                     __end_of__initialization:	
   179  07FC  0183               	clrf	3
   180  07FD  120A  118A  2F46   	ljmp	_main	;jump to C main() function
   181                           
   182                           	psect	bssCOMMON
   183  007B                     __pbssCOMMON:	
   184  007B                     _i:	
   185  007B                     	ds	2
   186                           
   187                           	psect	cstackCOMMON
   188  0070                     __pcstackCOMMON:	
   189  0070                     ?_lcd_cmd:	
   190  0070                     ?_setup:	
   191                           ; 1 bytes @ 0x0
   192                           
   193  0070                     ??_setup:	
   194                           ; 1 bytes @ 0x0
   195                           
   196  0070                     ?_lcd_ini:	
   197                           ; 1 bytes @ 0x0
   198                           
   199  0070                     ?_lcd_write_c:	
   200                           ; 1 bytes @ 0x0
   201                           
   202  0070                     ??_lcd_write_c:	
   203                           ; 1 bytes @ 0x0
   204                           
   205  0070                     ?_lcd_write_s:	
   206                           ; 1 bytes @ 0x0
   207                           
   208  0070                     ?_lcd_custom:	
   209                           ; 1 bytes @ 0x0
   210                           
   211  0070                     ?_main:	
   212                           ; 1 bytes @ 0x0
   213                           
   214  0070                     lcd_cmd@cmd:	
   215                           ; 1 bytes @ 0x0
   216                           
   217                           
   218                           ; 2 bytes @ 0x0
   219  0070                     	ds	2
   220  0072                     ??_lcd_cmd:	
   221  0072                     lcd_write_c@ch:	
   222                           ; 1 bytes @ 0x2
   223                           
   224                           
   225                           ; 1 bytes @ 0x2
   226  0072                     	ds	1
   227  0073                     ??_lcd_write_s:	
   228                           
   229                           ; 1 bytes @ 0x3
   230  0073                     	ds	1
   231  0074                     ??_lcd_ini:	
   232  0074                     ?_lcd_pos:	
   233                           ; 1 bytes @ 0x4
   234                           
   235  0074                     ??_lcd_custom:	
   236                           ; 1 bytes @ 0x4
   237                           
   238  0074                     lcd_write_s@st:	
   239                           ; 1 bytes @ 0x4
   240                           
   241  0074                     lcd_pos@fila:	
   242                           ; 1 bytes @ 0x4
   243                           
   244                           
   245                           ; 2 bytes @ 0x4
   246  0074                     	ds	2
   247  0076                     lcd_pos@columna:	
   248                           
   249                           ; 2 bytes @ 0x6
   250  0076                     	ds	2
   251  0078                     ??_lcd_pos:	
   252  0078                     ??_main:	
   253                           ; 1 bytes @ 0x8
   254                           
   255                           
   256                           ; 1 bytes @ 0x8
   257  0078                     	ds	3
   258                           
   259                           	psect	maintext
   260  0746                     __pmaintext:	
   261 ;;
   262 ;;Main: autosize = 0, tempsize = 3, incstack = 0, save=0
   263 ;;
   264 ;; *************** function _main *****************
   265 ;; Defined at:
   266 ;;		line 50 in file "main.c"
   267 ;; Parameters:    Size  Location     Type
   268 ;;		None
   269 ;; Auto vars:     Size  Location     Type
   270 ;;		None
   271 ;; Return value:  Size  Location     Type
   272 ;;                  1    wreg      void 
   273 ;; Registers used:
   274 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
   275 ;; Tracked objects:
   276 ;;		On entry : B00/0
   277 ;;		On exit  : 0/0
   278 ;;		Unchanged: 0/0
   279 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   280 ;;      Params:         0       0       0       0       0
   281 ;;      Locals:         0       0       0       0       0
   282 ;;      Temps:          3       0       0       0       0
   283 ;;      Totals:         3       0       0       0       0
   284 ;;Total ram usage:        3 bytes
   285 ;; Hardware stack levels required when called:    2
   286 ;; This function calls:
   287 ;;		_lcd_cmd
   288 ;;		_lcd_custom
   289 ;;		_lcd_ini
   290 ;;		_lcd_pos
   291 ;;		_lcd_write_c
   292 ;;		_lcd_write_s
   293 ;;		_setup
   294 ;; This function is called by:
   295 ;;		Startup code after reset
   296 ;; This function uses a non-reentrant model
   297 ;;
   298                           
   299                           
   300                           ;psect for function _main
   301  0746                     _main:	
   302                           
   303                           ;main.c: 52: setup();
   304                           
   305                           ;incstack = 0
   306                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
   307  0746  120A  118A  25E0  120A  118A  	fcall	_setup
   308                           
   309                           ;main.c: 53: lcd_ini();
   310  074B  120A  118A  267C  120A  118A  	fcall	_lcd_ini
   311                           
   312                           ;main.c: 54: lcd_custom();
   313  0750  120A  118A  26D5  120A  118A  	fcall	_lcd_custom
   314                           
   315                           ;main.c: 55: lcd_pos(1,0);
   316  0755  3001               	movlw	1
   317  0756  00F4               	movwf	lcd_pos@fila
   318  0757  3000               	movlw	0
   319  0758  00F5               	movwf	lcd_pos@fila+1
   320  0759  3000               	movlw	0
   321  075A  00F6               	movwf	lcd_pos@columna
   322  075B  00F7               	movwf	lcd_pos@columna+1
   323  075C  120A  118A  2608  120A  118A  	fcall	_lcd_pos
   324                           
   325                           ;main.c: 57: lcd_pos(1,5);
   326  0761  3001               	movlw	1
   327  0762  00F4               	movwf	lcd_pos@fila
   328  0763  3000               	movlw	0
   329  0764  00F5               	movwf	lcd_pos@fila+1
   330  0765  3005               	movlw	5
   331  0766  00F6               	movwf	lcd_pos@columna
   332  0767  3000               	movlw	0
   333  0768  00F7               	movwf	lcd_pos@columna+1
   334  0769  120A  118A  2608  120A  118A  	fcall	_lcd_pos
   335                           
   336                           ;main.c: 58: lcd_write_s("Hola mundo");
   337  076E  3001               	movlw	(low ((STR_1-__stringbase)| (0+32768)))& (0+255)
   338  076F  120A  118A  25EC  120A  118A  	fcall	_lcd_write_s
   339                           
   340                           ;main.c: 59: lcd_pos(1,0);
   341  0774  3001               	movlw	1
   342  0775  00F4               	movwf	lcd_pos@fila
   343  0776  3000               	movlw	0
   344  0777  00F5               	movwf	lcd_pos@fila+1
   345  0778  3000               	movlw	0
   346  0779  00F6               	movwf	lcd_pos@columna
   347  077A  00F7               	movwf	lcd_pos@columna+1
   348  077B  120A  118A  2608  120A  118A  	fcall	_lcd_pos
   349  0780                     l684:	
   350                           ;main.c: 60: while (1) {
   351                           
   352                           
   353                           ;main.c: 61: lcd_pos(1,0);
   354  0780  3001               	movlw	1
   355  0781  00F4               	movwf	lcd_pos@fila
   356  0782  3000               	movlw	0
   357  0783  00F5               	movwf	lcd_pos@fila+1
   358  0784  3000               	movlw	0
   359  0785  00F6               	movwf	lcd_pos@columna
   360  0786  00F7               	movwf	lcd_pos@columna+1
   361  0787  120A  118A  2608  120A  118A  	fcall	_lcd_pos
   362                           
   363                           ;main.c: 62: for(i=0;i<=15;i++){
   364  078C  01FB               	clrf	_i
   365  078D  01FC               	clrf	_i+1
   366  078E  087C               	movf	_i+1,w
   367  078F  3A80               	xorlw	128
   368  0790  00FF               	movwf	127
   369  0791  3080               	movlw	128
   370  0792  027F               	subwf	127,w
   371  0793  1D03               	skipz
   372  0794  2F97               	goto	u125
   373  0795  3010               	movlw	16
   374  0796  027B               	subwf	_i,w
   375  0797                     u125:	
   376  0797  1803               	btfsc	3,0
   377  0798  2FE6               	goto	l706
   378  0799                     l692:	
   379                           
   380                           ;main.c: 64: lcd_write_c(0);
   381  0799  3000               	movlw	0
   382  079A  120A  118A  2652  120A  118A  	fcall	_lcd_write_c
   383                           
   384                           ;main.c: 65: lcd_cmd(0B00010000);
   385  079F  3010               	movlw	16
   386  07A0  00F0               	movwf	lcd_cmd@cmd
   387  07A1  3000               	movlw	0
   388  07A2  00F1               	movwf	lcd_cmd@cmd+1
   389  07A3  120A  118A  2629  120A  118A  	fcall	_lcd_cmd
   390                           
   391                           ;main.c: 66: _delay((unsigned long)((200)*(8000000/4000)));
   392  07A8  3003               	movlw	3
   393  07A9  00FA               	movwf	??_main+2
   394  07AA  3008               	movlw	8
   395  07AB  00F9               	movwf	??_main+1
   396  07AC  3077               	movlw	119
   397  07AD  00F8               	movwf	??_main
   398  07AE                     u147:	
   399  07AE  0BF8               	decfsz	??_main,f
   400  07AF  2FAE               	goto	u147
   401  07B0  0BF9               	decfsz	??_main+1,f
   402  07B1  2FAE               	goto	u147
   403  07B2  0BFA               	decfsz	??_main+2,f
   404  07B3  2FAE               	goto	u147
   405                           
   406                           ;main.c: 67: lcd_write_c(1);
   407  07B4  3001               	movlw	1
   408  07B5  120A  118A  2652  120A  118A  	fcall	_lcd_write_c
   409                           
   410                           ;main.c: 68: lcd_cmd(0B00010000);
   411  07BA  3010               	movlw	16
   412  07BB  00F0               	movwf	lcd_cmd@cmd
   413  07BC  3000               	movlw	0
   414  07BD  00F1               	movwf	lcd_cmd@cmd+1
   415  07BE  120A  118A  2629  120A  118A  	fcall	_lcd_cmd
   416                           
   417                           ;main.c: 69: _delay((unsigned long)((200)*(8000000/4000)));
   418  07C3  3003               	movlw	3
   419  07C4  00FA               	movwf	??_main+2
   420  07C5  3008               	movlw	8
   421  07C6  00F9               	movwf	??_main+1
   422  07C7  3077               	movlw	119
   423  07C8  00F8               	movwf	??_main
   424  07C9                     u157:	
   425  07C9  0BF8               	decfsz	??_main,f
   426  07CA  2FC9               	goto	u157
   427  07CB  0BF9               	decfsz	??_main+1,f
   428  07CC  2FC9               	goto	u157
   429  07CD  0BFA               	decfsz	??_main+2,f
   430  07CE  2FC9               	goto	u157
   431                           
   432                           ;main.c: 70: lcd_write_c(' ');
   433  07CF  3020               	movlw	32
   434  07D0  120A  118A  2652  120A  118A  	fcall	_lcd_write_c
   435  07D5  3001               	movlw	1
   436  07D6  07FB               	addwf	_i,f
   437  07D7  1803               	skipnc
   438  07D8  0AFC               	incf	_i+1,f
   439  07D9  3000               	movlw	0
   440  07DA  07FC               	addwf	_i+1,f
   441  07DB  087C               	movf	_i+1,w
   442  07DC  3A80               	xorlw	128
   443  07DD  00FF               	movwf	127
   444  07DE  3080               	movlw	128
   445  07DF  027F               	subwf	127,w
   446  07E0  1D03               	skipz
   447  07E1  2FE4               	goto	u135
   448  07E2  3010               	movlw	16
   449  07E3  027B               	subwf	_i,w
   450  07E4                     u135:	
   451  07E4  1C03               	skipc
   452  07E5  2F99               	goto	l692
   453  07E6                     l706:	
   454                           
   455                           ;main.c: 71: }
   456                           ;main.c: 72: lcd_pos(1,5);
   457  07E6  3001               	movlw	1
   458  07E7  00F4               	movwf	lcd_pos@fila
   459  07E8  3000               	movlw	0
   460  07E9  00F5               	movwf	lcd_pos@fila+1
   461  07EA  3005               	movlw	5
   462  07EB  00F6               	movwf	lcd_pos@columna
   463  07EC  3000               	movlw	0
   464  07ED  00F7               	movwf	lcd_pos@columna+1
   465  07EE  120A  118A  2608  120A  118A  	fcall	_lcd_pos
   466                           
   467                           ;main.c: 73: lcd_write_s("Hola mundo");
   468  07F3  3001               	movlw	(low ((STR_1-__stringbase)| (0+32768)))& (0+255)
   469  07F4  120A  118A  25EC  120A  118A  	fcall	_lcd_write_s
   470  07F9  2F80               	goto	l684
   471  07FA                     __end_of_main:	
   472                           ;main.c: 74: }
   473                           ;main.c: 76: return;
   474                           
   475                           
   476                           	psect	text1
   477  05E0                     __ptext1:	
   478 ;; *************** function _setup *****************
   479 ;; Defined at:
   480 ;;		line 81 in file "main.c"
   481 ;; Parameters:    Size  Location     Type
   482 ;;		None
   483 ;; Auto vars:     Size  Location     Type
   484 ;;		None
   485 ;; Return value:  Size  Location     Type
   486 ;;                  1    wreg      void 
   487 ;; Registers used:
   488 ;;		wreg, status,2
   489 ;; Tracked objects:
   490 ;;		On entry : 0/0
   491 ;;		On exit  : 0/0
   492 ;;		Unchanged: 0/0
   493 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   494 ;;      Params:         0       0       0       0       0
   495 ;;      Locals:         0       0       0       0       0
   496 ;;      Temps:          0       0       0       0       0
   497 ;;      Totals:         0       0       0       0       0
   498 ;;Total ram usage:        0 bytes
   499 ;; Hardware stack levels used:    1
   500 ;; This function calls:
   501 ;;		Nothing
   502 ;; This function is called by:
   503 ;;		_main
   504 ;; This function uses a non-reentrant model
   505 ;;
   506                           
   507                           
   508                           ;psect for function _setup
   509  05E0                     _setup:	
   510                           
   511                           ;main.c: 82: OSCCON=0B01110000;
   512                           
   513                           ;incstack = 0
   514                           ; Regs used in _setup: [wreg+status,2]
   515  05E0  3070               	movlw	112
   516  05E1  1683               	bsf	3,5	;RP0=1, select bank1
   517  05E2  1303               	bcf	3,6	;RP1=0, select bank1
   518  05E3  008F               	movwf	15	;volatile
   519                           
   520                           ;main.c: 85: TRISD=0;
   521  05E4  0188               	clrf	8	;volatile
   522                           
   523                           ;main.c: 86: PORTD=0;
   524  05E5  1283               	bcf	3,5	;RP0=0, select bank0
   525  05E6  1303               	bcf	3,6	;RP1=0, select bank0
   526  05E7  0188               	clrf	8	;volatile
   527                           
   528                           ;main.c: 87: ANSELH=0;
   529  05E8  1683               	bsf	3,5	;RP0=1, select bank3
   530  05E9  1703               	bsf	3,6	;RP1=1, select bank3
   531  05EA  0189               	clrf	9	;volatile
   532  05EB  0008               	return
   533  05EC                     __end_of_setup:	
   534                           
   535                           	psect	text2
   536  05EC                     __ptext2:	
   537 ;; *************** function _lcd_write_s *****************
   538 ;; Defined at:
   539 ;;		line 165 in file "LCD_header.h"
   540 ;; Parameters:    Size  Location     Type
   541 ;;  st              1    wreg     PTR unsigned char 
   542 ;;		 -> STR_2(11), STR_1(11), 
   543 ;; Auto vars:     Size  Location     Type
   544 ;;  st              1    4[COMMON] PTR unsigned char 
   545 ;;		 -> STR_2(11), STR_1(11), 
   546 ;; Return value:  Size  Location     Type
   547 ;;                  1    wreg      void 
   548 ;; Registers used:
   549 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
   550 ;; Tracked objects:
   551 ;;		On entry : 0/0
   552 ;;		On exit  : 0/0
   553 ;;		Unchanged: 0/0
   554 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   555 ;;      Params:         0       0       0       0       0
   556 ;;      Locals:         1       0       0       0       0
   557 ;;      Temps:          1       0       0       0       0
   558 ;;      Totals:         2       0       0       0       0
   559 ;;Total ram usage:        2 bytes
   560 ;; Hardware stack levels used:    1
   561 ;; Hardware stack levels required when called:    1
   562 ;; This function calls:
   563 ;;		_lcd_write_c
   564 ;; This function is called by:
   565 ;;		_main
   566 ;; This function uses a non-reentrant model
   567 ;;
   568                           
   569                           
   570                           ;psect for function _lcd_write_s
   571  05EC                     _lcd_write_s:	
   572                           
   573                           ;incstack = 0
   574                           ; Regs used in _lcd_write_s: [wreg-fsr0h+status,2+status,0+pclath+cstack]
   575                           ;lcd_write_s@st stored from wreg
   576  05EC  00F4               	movwf	lcd_write_s@st
   577  05ED                     l666:	
   578                           ;LCD_header.h: 167: for(;*st!='\0';st++){
   579                           
   580  05ED  0874               	movf	lcd_write_s@st,w
   581  05EE  0084               	movwf	4
   582  05EF  120A  118A  2003  120A  118A  	fcall	stringdir
   583  05F4  3A00               	xorlw	0
   584  05F5  1903               	btfsc	3,2
   585  05F6  0008               	return
   586                           
   587                           ;LCD_header.h: 168: lcd_write_c(*st);
   588  05F7  0874               	movf	lcd_write_s@st,w
   589  05F8  0084               	movwf	4
   590  05F9  120A  118A  2003  120A  118A  	fcall	stringdir
   591  05FE  120A  118A  2652  120A  118A  	fcall	_lcd_write_c
   592  0603  3001               	movlw	1
   593  0604  00F3               	movwf	??_lcd_write_s
   594  0605  0873               	movf	??_lcd_write_s,w
   595  0606  07F4               	addwf	lcd_write_s@st,f
   596  0607  2DED               	goto	l666
   597  0608                     __end_of_lcd_write_s:	
   598                           
   599                           	psect	text3
   600  0608                     __ptext3:	
   601 ;; *************** function _lcd_pos *****************
   602 ;; Defined at:
   603 ;;		line 172 in file "LCD_header.h"
   604 ;; Parameters:    Size  Location     Type
   605 ;;  fila            2    4[COMMON] int 
   606 ;;  columna         2    6[COMMON] int 
   607 ;; Auto vars:     Size  Location     Type
   608 ;;		None
   609 ;; Return value:  Size  Location     Type
   610 ;;                  1    wreg      void 
   611 ;; Registers used:
   612 ;;		wreg, status,2, status,0, pclath, cstack
   613 ;; Tracked objects:
   614 ;;		On entry : 0/0
   615 ;;		On exit  : 0/0
   616 ;;		Unchanged: 0/0
   617 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   618 ;;      Params:         4       0       0       0       0
   619 ;;      Locals:         0       0       0       0       0
   620 ;;      Temps:          0       0       0       0       0
   621 ;;      Totals:         4       0       0       0       0
   622 ;;Total ram usage:        4 bytes
   623 ;; Hardware stack levels used:    1
   624 ;; Hardware stack levels required when called:    1
   625 ;; This function calls:
   626 ;;		_lcd_cmd
   627 ;; This function is called by:
   628 ;;		_main
   629 ;; This function uses a non-reentrant model
   630 ;;
   631                           
   632                           
   633                           ;psect for function _lcd_pos
   634  0608                     _lcd_pos:	
   635                           
   636                           ;LCD_header.h: 174: if(fila==1){
   637                           
   638                           ;incstack = 0
   639                           ; Regs used in _lcd_pos: [wreg+status,2+status,0+pclath+cstack]
   640  0608  0374               	decf	lcd_pos@fila,w
   641  0609  0475               	iorwf	lcd_pos@fila+1,w
   642  060A  1D03               	btfss	3,2
   643  060B  2E18               	goto	l672
   644                           
   645                           ;LCD_header.h: 175: lcd_cmd(columna+0B10000000);
   646  060C  0876               	movf	lcd_pos@columna,w
   647  060D  3E80               	addlw	128
   648  060E  00F0               	movwf	lcd_cmd@cmd
   649  060F  0877               	movf	lcd_pos@columna+1,w
   650  0610  1803               	skipnc
   651  0611  3E01               	addlw	1
   652  0612  3E00               	addlw	0
   653  0613  00F1               	movwf	lcd_cmd@cmd+1
   654  0614  120A  118A  2629   	fcall	_lcd_cmd
   655                           
   656                           ;LCD_header.h: 176: }
   657  0617  0008               	return
   658  0618                     l672:	
   659                           
   660                           ;LCD_header.h: 177: else if(fila==2){
   661  0618  3002               	movlw	2
   662  0619  0674               	xorwf	lcd_pos@fila,w
   663  061A  0475               	iorwf	lcd_pos@fila+1,w
   664  061B  1D03               	btfss	3,2
   665  061C  0008               	return
   666                           
   667                           ;LCD_header.h: 178: lcd_cmd(columna+0B11000000);
   668  061D  0876               	movf	lcd_pos@columna,w
   669  061E  3EC0               	addlw	192
   670  061F  00F0               	movwf	lcd_cmd@cmd
   671  0620  0877               	movf	lcd_pos@columna+1,w
   672  0621  1803               	skipnc
   673  0622  3E01               	addlw	1
   674  0623  3E00               	addlw	0
   675  0624  00F1               	movwf	lcd_cmd@cmd+1
   676  0625  120A  118A  2629   	fcall	_lcd_cmd
   677                           
   678                           ;LCD_header.h: 180: else{}
   679                           
   680                           ;LCD_header.h: 179: }
   681  0628  0008               	return
   682  0629                     __end_of_lcd_pos:	
   683                           
   684                           	psect	text4
   685  067C                     __ptext4:	
   686 ;; *************** function _lcd_ini *****************
   687 ;; Defined at:
   688 ;;		line 128 in file "LCD_header.h"
   689 ;; Parameters:    Size  Location     Type
   690 ;;		None
   691 ;; Auto vars:     Size  Location     Type
   692 ;;		None
   693 ;; Return value:  Size  Location     Type
   694 ;;                  1    wreg      void 
   695 ;; Registers used:
   696 ;;		wreg, status,2, status,0, pclath, cstack
   697 ;; Tracked objects:
   698 ;;		On entry : 0/0
   699 ;;		On exit  : 0/0
   700 ;;		Unchanged: 0/0
   701 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   702 ;;      Params:         0       0       0       0       0
   703 ;;      Locals:         0       0       0       0       0
   704 ;;      Temps:          2       0       0       0       0
   705 ;;      Totals:         2       0       0       0       0
   706 ;;Total ram usage:        2 bytes
   707 ;; Hardware stack levels used:    1
   708 ;; Hardware stack levels required when called:    1
   709 ;; This function calls:
   710 ;;		_lcd_cmd
   711 ;; This function is called by:
   712 ;;		_main
   713 ;; This function uses a non-reentrant model
   714 ;;
   715                           
   716                           
   717                           ;psect for function _lcd_ini
   718  067C                     _lcd_ini:	
   719                           
   720                           ;LCD_header.h: 130: _delay((unsigned long)((20)*(8000000/4000)));
   721                           
   722                           ;incstack = 0
   723                           ; Regs used in _lcd_ini: [wreg+status,2+status,0+pclath+cstack]
   724  067C  3034               	movlw	52
   725  067D  00F5               	movwf	??_lcd_ini+1
   726  067E  30F1               	movlw	241
   727  067F  00F4               	movwf	??_lcd_ini
   728  0680                     u167:	
   729  0680  0BF4               	decfsz	??_lcd_ini,f
   730  0681  2E80               	goto	u167
   731  0682  0BF5               	decfsz	??_lcd_ini+1,f
   732  0683  2E80               	goto	u167
   733  0684  2E85               	nop2
   734                           
   735                           ;LCD_header.h: 131: lcd_cmd(0B00110000);
   736  0685  3030               	movlw	48
   737  0686  00F0               	movwf	lcd_cmd@cmd
   738  0687  3000               	movlw	0
   739  0688  00F1               	movwf	lcd_cmd@cmd+1
   740  0689  120A  118A  2629  120A  118A  	fcall	_lcd_cmd
   741                           
   742                           ;LCD_header.h: 132: _delay((unsigned long)((5)*(8000000/4000)));
   743  068E  300D               	movlw	13
   744  068F  00F5               	movwf	??_lcd_ini+1
   745  0690  30FB               	movlw	251
   746  0691  00F4               	movwf	??_lcd_ini
   747  0692                     u177:	
   748  0692  0BF4               	decfsz	??_lcd_ini,f
   749  0693  2E92               	goto	u177
   750  0694  0BF5               	decfsz	??_lcd_ini+1,f
   751  0695  2E92               	goto	u177
   752  0696  2E97               	nop2
   753                           
   754                           ;LCD_header.h: 133: lcd_cmd(0B00110000);
   755  0697  3030               	movlw	48
   756  0698  00F0               	movwf	lcd_cmd@cmd
   757  0699  3000               	movlw	0
   758  069A  00F1               	movwf	lcd_cmd@cmd+1
   759  069B  120A  118A  2629  120A  118A  	fcall	_lcd_cmd
   760                           
   761                           ;LCD_header.h: 134: _delay((unsigned long)((1)*(8000000/4000)));
   762  06A0  3003               	movlw	3
   763  06A1  00F5               	movwf	??_lcd_ini+1
   764  06A2  3097               	movlw	151
   765  06A3  00F4               	movwf	??_lcd_ini
   766  06A4                     u187:	
   767  06A4  0BF4               	decfsz	??_lcd_ini,f
   768  06A5  2EA4               	goto	u187
   769  06A6  0BF5               	decfsz	??_lcd_ini+1,f
   770  06A7  2EA4               	goto	u187
   771  06A8  2EA9               	nop2
   772                           
   773                           ;LCD_header.h: 135: lcd_cmd(0B00110000);
   774  06A9  3030               	movlw	48
   775  06AA  00F0               	movwf	lcd_cmd@cmd
   776  06AB  3000               	movlw	0
   777  06AC  00F1               	movwf	lcd_cmd@cmd+1
   778  06AD  120A  118A  2629  120A  118A  	fcall	_lcd_cmd
   779                           
   780                           ;LCD_header.h: 138: lcd_cmd(0B00101000);
   781  06B2  3028               	movlw	40
   782  06B3  00F0               	movwf	lcd_cmd@cmd
   783  06B4  3000               	movlw	0
   784  06B5  00F1               	movwf	lcd_cmd@cmd+1
   785  06B6  120A  118A  2629  120A  118A  	fcall	_lcd_cmd
   786                           
   787                           ;LCD_header.h: 139: lcd_cmd(0B00001100);
   788  06BB  300C               	movlw	12
   789  06BC  00F0               	movwf	lcd_cmd@cmd
   790  06BD  3000               	movlw	0
   791  06BE  00F1               	movwf	lcd_cmd@cmd+1
   792  06BF  120A  118A  2629  120A  118A  	fcall	_lcd_cmd
   793                           
   794                           ;LCD_header.h: 140: lcd_cmd(0B00000001);
   795  06C4  3001               	movlw	1
   796  06C5  00F0               	movwf	lcd_cmd@cmd
   797  06C6  3000               	movlw	0
   798  06C7  00F1               	movwf	lcd_cmd@cmd+1
   799  06C8  120A  118A  2629  120A  118A  	fcall	_lcd_cmd
   800                           
   801                           ;LCD_header.h: 142: lcd_cmd(0B00000100);
   802  06CD  3004               	movlw	4
   803  06CE  00F0               	movwf	lcd_cmd@cmd
   804  06CF  3000               	movlw	0
   805  06D0  00F1               	movwf	lcd_cmd@cmd+1
   806  06D1  120A  118A  2629   	fcall	_lcd_cmd
   807  06D4  0008               	return
   808  06D5                     __end_of_lcd_ini:	
   809                           
   810                           	psect	text5
   811  06D5                     __ptext5:	
   812 ;; *************** function _lcd_custom *****************
   813 ;; Defined at:
   814 ;;		line 183 in file "LCD_header.h"
   815 ;; Parameters:    Size  Location     Type
   816 ;;		None
   817 ;; Auto vars:     Size  Location     Type
   818 ;;		None
   819 ;; Return value:  Size  Location     Type
   820 ;;                  1    wreg      void 
   821 ;; Registers used:
   822 ;;		wreg, status,2, status,0, pclath, cstack
   823 ;; Tracked objects:
   824 ;;		On entry : 0/0
   825 ;;		On exit  : 0/0
   826 ;;		Unchanged: 0/0
   827 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   828 ;;      Params:         0       0       0       0       0
   829 ;;      Locals:         0       0       0       0       0
   830 ;;      Temps:          0       0       0       0       0
   831 ;;      Totals:         0       0       0       0       0
   832 ;;Total ram usage:        0 bytes
   833 ;; Hardware stack levels used:    1
   834 ;; Hardware stack levels required when called:    1
   835 ;; This function calls:
   836 ;;		_lcd_cmd
   837 ;;		_lcd_write_c
   838 ;; This function is called by:
   839 ;;		_main
   840 ;; This function uses a non-reentrant model
   841 ;;
   842                           
   843                           
   844                           ;psect for function _lcd_custom
   845  06D5                     _lcd_custom:	
   846                           
   847                           ;LCD_header.h: 185: lcd_cmd(0B01000000);
   848                           
   849                           ;incstack = 0
   850                           ; Regs used in _lcd_custom: [wreg+status,2+status,0+pclath+cstack]
   851  06D5  3040               	movlw	64
   852  06D6  00F0               	movwf	lcd_cmd@cmd
   853  06D7  3000               	movlw	0
   854  06D8  00F1               	movwf	lcd_cmd@cmd+1
   855  06D9  120A  118A  2629  120A  118A  	fcall	_lcd_cmd
   856                           
   857                           ;LCD_header.h: 186: lcd_write_c(0B00001110);
   858  06DE  300E               	movlw	14
   859  06DF  120A  118A  2652  120A  118A  	fcall	_lcd_write_c
   860                           
   861                           ;LCD_header.h: 187: lcd_write_c(0B00011111);
   862  06E4  301F               	movlw	31
   863  06E5  120A  118A  2652  120A  118A  	fcall	_lcd_write_c
   864                           
   865                           ;LCD_header.h: 188: lcd_write_c(0B00010110);
   866  06EA  3016               	movlw	22
   867  06EB  120A  118A  2652  120A  118A  	fcall	_lcd_write_c
   868                           
   869                           ;LCD_header.h: 189: lcd_write_c(0B00011100);
   870  06F0  301C               	movlw	28
   871  06F1  120A  118A  2652  120A  118A  	fcall	_lcd_write_c
   872                           
   873                           ;LCD_header.h: 190: lcd_write_c(0B00011100);
   874  06F6  301C               	movlw	28
   875  06F7  120A  118A  2652  120A  118A  	fcall	_lcd_write_c
   876                           
   877                           ;LCD_header.h: 191: lcd_write_c(0B00011110);
   878  06FC  301E               	movlw	30
   879  06FD  120A  118A  2652  120A  118A  	fcall	_lcd_write_c
   880                           
   881                           ;LCD_header.h: 192: lcd_write_c(0B00011111);
   882  0702  301F               	movlw	31
   883  0703  120A  118A  2652  120A  118A  	fcall	_lcd_write_c
   884                           
   885                           ;LCD_header.h: 193: lcd_write_c(0B00001110);
   886  0708  300E               	movlw	14
   887  0709  120A  118A  2652  120A  118A  	fcall	_lcd_write_c
   888                           
   889                           ;LCD_header.h: 195: lcd_cmd(0B01001000);
   890  070E  3048               	movlw	72
   891  070F  00F0               	movwf	lcd_cmd@cmd
   892  0710  3000               	movlw	0
   893  0711  00F1               	movwf	lcd_cmd@cmd+1
   894  0712  120A  118A  2629  120A  118A  	fcall	_lcd_cmd
   895                           
   896                           ;LCD_header.h: 196: lcd_write_c(0B00001110);
   897  0717  300E               	movlw	14
   898  0718  120A  118A  2652  120A  118A  	fcall	_lcd_write_c
   899                           
   900                           ;LCD_header.h: 197: lcd_write_c(0B00011111);
   901  071D  301F               	movlw	31
   902  071E  120A  118A  2652  120A  118A  	fcall	_lcd_write_c
   903                           
   904                           ;LCD_header.h: 198: lcd_write_c(0B00010111);
   905  0723  3017               	movlw	23
   906  0724  120A  118A  2652  120A  118A  	fcall	_lcd_write_c
   907                           
   908                           ;LCD_header.h: 199: lcd_write_c(0B00011111);
   909  0729  301F               	movlw	31
   910  072A  120A  118A  2652  120A  118A  	fcall	_lcd_write_c
   911                           
   912                           ;LCD_header.h: 200: lcd_write_c(0B00011100);
   913  072F  301C               	movlw	28
   914  0730  120A  118A  2652  120A  118A  	fcall	_lcd_write_c
   915                           
   916                           ;LCD_header.h: 201: lcd_write_c(0B00011111);
   917  0735  301F               	movlw	31
   918  0736  120A  118A  2652  120A  118A  	fcall	_lcd_write_c
   919                           
   920                           ;LCD_header.h: 202: lcd_write_c(0B00011111);
   921  073B  301F               	movlw	31
   922  073C  120A  118A  2652  120A  118A  	fcall	_lcd_write_c
   923                           
   924                           ;LCD_header.h: 203: lcd_write_c(0B00001110);
   925  0741  300E               	movlw	14
   926  0742  120A  118A  2652   	fcall	_lcd_write_c
   927  0745  0008               	return
   928  0746                     __end_of_lcd_custom:	
   929                           
   930                           	psect	text6
   931  0652                     __ptext6:	
   932 ;; *************** function _lcd_write_c *****************
   933 ;; Defined at:
   934 ;;		line 155 in file "LCD_header.h"
   935 ;; Parameters:    Size  Location     Type
   936 ;;  ch              1    wreg     unsigned char 
   937 ;; Auto vars:     Size  Location     Type
   938 ;;  ch              1    2[COMMON] unsigned char 
   939 ;; Return value:  Size  Location     Type
   940 ;;                  1    wreg      void 
   941 ;; Registers used:
   942 ;;		wreg, status,2, status,0
   943 ;; Tracked objects:
   944 ;;		On entry : 0/0
   945 ;;		On exit  : 0/0
   946 ;;		Unchanged: 0/0
   947 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   948 ;;      Params:         0       0       0       0       0
   949 ;;      Locals:         1       0       0       0       0
   950 ;;      Temps:          2       0       0       0       0
   951 ;;      Totals:         3       0       0       0       0
   952 ;;Total ram usage:        3 bytes
   953 ;; Hardware stack levels used:    1
   954 ;; This function calls:
   955 ;;		Nothing
   956 ;; This function is called by:
   957 ;;		_lcd_write_s
   958 ;;		_lcd_custom
   959 ;;		_main
   960 ;; This function uses a non-reentrant model
   961 ;;
   962                           
   963                           
   964                           ;psect for function _lcd_write_c
   965  0652                     _lcd_write_c:	
   966                           
   967                           ;incstack = 0
   968                           ; Regs used in _lcd_write_c: [wreg+status,2+status,0]
   969                           ;lcd_write_c@ch stored from wreg
   970  0652  00F2               	movwf	lcd_write_c@ch
   971                           
   972                           ;LCD_header.h: 157: RD2=1;
   973  0653  1283               	bcf	3,5	;RP0=0, select bank0
   974  0654  1303               	bcf	3,6	;RP1=0, select bank0
   975  0655  1508               	bsf	8,2	;volatile
   976                           
   977                           ;LCD_header.h: 158: _delay((unsigned long)((1)*(8000000/4000)));
   978  0656  3003               	movlw	3
   979  0657  00F1               	movwf	??_lcd_write_c+1
   980  0658  3097               	movlw	151
   981  0659  00F0               	movwf	??_lcd_write_c
   982  065A                     u197:	
   983  065A  0BF0               	decfsz	??_lcd_write_c,f
   984  065B  2E5A               	goto	u197
   985  065C  0BF1               	decfsz	??_lcd_write_c+1,f
   986  065D  2E5A               	goto	u197
   987  065E  2E5F               	nop2
   988                           
   989                           ;LCD_header.h: 159: PORTD=(PORTD&0X0F)|(ch&0XF0);
   990  065F  30F0               	movlw	240
   991  0660  0572               	andwf	lcd_write_c@ch,w
   992  0661  00F0               	movwf	??_lcd_write_c
   993  0662  1283               	bcf	3,5	;RP0=0, select bank0
   994  0663  1303               	bcf	3,6	;RP1=0, select bank0
   995  0664  0808               	movf	8,w	;volatile
   996  0665  390F               	andlw	15
   997  0666  0470               	iorwf	??_lcd_write_c,w
   998  0667  0088               	movwf	8	;volatile
   999                           
  1000                           ;LCD_header.h: 160: ((RD3=1),(RD3=0));
  1001  0668  1588               	bsf	8,3	;volatile
  1002  0669  1188               	bcf	8,3	;volatile
  1003                           
  1004                           ;LCD_header.h: 161: PORTD=(PORTD&0X0F)|((ch<<4)&0XF0);
  1005  066A  0872               	movf	lcd_write_c@ch,w
  1006  066B  00F0               	movwf	??_lcd_write_c
  1007  066C  3004               	movlw	4
  1008  066D                     u25:	
  1009  066D  1003               	clrc
  1010  066E  0DF0               	rlf	??_lcd_write_c,f
  1011  066F  3EFF               	addlw	-1
  1012  0670  1D03               	skipz
  1013  0671  2E6D               	goto	u25
  1014  0672  30F0               	movlw	240
  1015  0673  0570               	andwf	??_lcd_write_c,w
  1016  0674  00F1               	movwf	??_lcd_write_c+1
  1017  0675  0808               	movf	8,w	;volatile
  1018  0676  390F               	andlw	15
  1019  0677  0471               	iorwf	??_lcd_write_c+1,w
  1020  0678  0088               	movwf	8	;volatile
  1021                           
  1022                           ;LCD_header.h: 162: ((RD3=1),(RD3=0));
  1023  0679  1588               	bsf	8,3	;volatile
  1024  067A  1188               	bcf	8,3	;volatile
  1025  067B  0008               	return
  1026  067C                     __end_of_lcd_write_c:	
  1027                           
  1028                           	psect	text7
  1029  0629                     __ptext7:	
  1030 ;; *************** function _lcd_cmd *****************
  1031 ;; Defined at:
  1032 ;;		line 145 in file "LCD_header.h"
  1033 ;; Parameters:    Size  Location     Type
  1034 ;;  cmd             2    0[COMMON] int 
  1035 ;; Auto vars:     Size  Location     Type
  1036 ;;		None
  1037 ;; Return value:  Size  Location     Type
  1038 ;;                  1    wreg      void 
  1039 ;; Registers used:
  1040 ;;		wreg, status,2, status,0
  1041 ;; Tracked objects:
  1042 ;;		On entry : 0/0
  1043 ;;		On exit  : 0/0
  1044 ;;		Unchanged: 0/0
  1045 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1046 ;;      Params:         2       0       0       0       0
  1047 ;;      Locals:         0       0       0       0       0
  1048 ;;      Temps:          2       0       0       0       0
  1049 ;;      Totals:         4       0       0       0       0
  1050 ;;Total ram usage:        4 bytes
  1051 ;; Hardware stack levels used:    1
  1052 ;; This function calls:
  1053 ;;		Nothing
  1054 ;; This function is called by:
  1055 ;;		_lcd_ini
  1056 ;;		_lcd_pos
  1057 ;;		_lcd_custom
  1058 ;;		_main
  1059 ;; This function uses a non-reentrant model
  1060 ;;
  1061                           
  1062                           
  1063                           ;psect for function _lcd_cmd
  1064  0629                     _lcd_cmd:	
  1065                           
  1066                           ;LCD_header.h: 147: RD2=0;
  1067                           
  1068                           ;incstack = 0
  1069                           ; Regs used in _lcd_cmd: [wreg+status,2+status,0]
  1070  0629  1283               	bcf	3,5	;RP0=0, select bank0
  1071  062A  1303               	bcf	3,6	;RP1=0, select bank0
  1072  062B  1108               	bcf	8,2	;volatile
  1073                           
  1074                           ;LCD_header.h: 148: _delay((unsigned long)((1)*(8000000/4000)));
  1075  062C  3003               	movlw	3
  1076  062D  00F3               	movwf	??_lcd_cmd+1
  1077  062E  3097               	movlw	151
  1078  062F  00F2               	movwf	??_lcd_cmd
  1079  0630                     u207:	
  1080  0630  0BF2               	decfsz	??_lcd_cmd,f
  1081  0631  2E30               	goto	u207
  1082  0632  0BF3               	decfsz	??_lcd_cmd+1,f
  1083  0633  2E30               	goto	u207
  1084  0634  2E35               	nop2
  1085                           
  1086                           ;LCD_header.h: 149: PORTD=(PORTD&0X0F)|(cmd&0XF0);
  1087  0635  30F0               	movlw	240
  1088  0636  0570               	andwf	lcd_cmd@cmd,w
  1089  0637  00F2               	movwf	??_lcd_cmd
  1090  0638  1283               	bcf	3,5	;RP0=0, select bank0
  1091  0639  1303               	bcf	3,6	;RP1=0, select bank0
  1092  063A  0808               	movf	8,w	;volatile
  1093  063B  390F               	andlw	15
  1094  063C  0472               	iorwf	??_lcd_cmd,w
  1095  063D  0088               	movwf	8	;volatile
  1096                           
  1097                           ;LCD_header.h: 150: ((RD3=1),(RD3=0));
  1098  063E  1588               	bsf	8,3	;volatile
  1099  063F  1188               	bcf	8,3	;volatile
  1100                           
  1101                           ;LCD_header.h: 151: PORTD=(PORTD&0X0F)|((cmd<<4)&0XF0);
  1102  0640  0870               	movf	lcd_cmd@cmd,w
  1103  0641  00F2               	movwf	??_lcd_cmd
  1104  0642  3004               	movlw	4
  1105  0643                     u85:	
  1106  0643  1003               	clrc
  1107  0644  0DF2               	rlf	??_lcd_cmd,f
  1108  0645  3EFF               	addlw	-1
  1109  0646  1D03               	skipz
  1110  0647  2E43               	goto	u85
  1111  0648  30F0               	movlw	240
  1112  0649  0572               	andwf	??_lcd_cmd,w
  1113  064A  00F3               	movwf	??_lcd_cmd+1
  1114  064B  0808               	movf	8,w	;volatile
  1115  064C  390F               	andlw	15
  1116  064D  0473               	iorwf	??_lcd_cmd+1,w
  1117  064E  0088               	movwf	8	;volatile
  1118                           
  1119                           ;LCD_header.h: 152: ((RD3=1),(RD3=0));
  1120  064F  1588               	bsf	8,3	;volatile
  1121  0650  1188               	bcf	8,3	;volatile
  1122  0651  0008               	return
  1123  0652                     __end_of_lcd_cmd:	
  1124  007E                     btemp	set	126	;btemp
  1125  007E                     wtemp0	set	126


Data Sizes:
    Strings     11
    Constant    0
    Data        0
    BSS         2
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     11      13
    BANK0            80      0       0
    BANK1            80      0       0
    BANK3            96      0       0
    BANK2            96      0       0

Pointer List with Targets:

    lcd_write_s@st	PTR unsigned char  size(1) Largest target is 11
		 -> STR_2(CODE[11]), STR_1(CODE[11]), 


Critical Paths under _main in COMMON

    _main->_lcd_pos
    _lcd_write_s->_lcd_write_c
    _lcd_pos->_lcd_cmd
    _lcd_ini->_lcd_cmd
    _lcd_custom->_lcd_cmd

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 3     3      0    3739
                                              8 COMMON     3     3      0
                            _lcd_cmd
                         _lcd_custom
                            _lcd_ini
                            _lcd_pos
                        _lcd_write_c
                        _lcd_write_s
                              _setup
 ---------------------------------------------------------------------------------
 (1) _setup                                                0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _lcd_write_s                                          2     2      0     129
                                              3 COMMON     2     2      0
                        _lcd_write_c
 ---------------------------------------------------------------------------------
 (1) _lcd_pos                                              4     0      4    1351
                                              4 COMMON     4     0      4
                            _lcd_cmd
 ---------------------------------------------------------------------------------
 (1) _lcd_ini                                              2     2      0     733
                                              4 COMMON     2     2      0
                            _lcd_cmd
 ---------------------------------------------------------------------------------
 (1) _lcd_custom                                           0     0      0     763
                            _lcd_cmd
                        _lcd_write_c
 ---------------------------------------------------------------------------------
 (2) _lcd_write_c                                          3     3      0      30
                                              0 COMMON     3     3      0
 ---------------------------------------------------------------------------------
 (2) _lcd_cmd                                              4     2      2     733
                                              0 COMMON     4     2      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 2
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _lcd_cmd
   _lcd_custom
     _lcd_cmd
     _lcd_write_c
   _lcd_ini
     _lcd_cmd
   _lcd_pos
     _lcd_cmd
   _lcd_write_c
   _lcd_write_s
     _lcd_write_c
   _setup

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMMON            E      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
COMMON               E      B       D       1       92.9%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
STACK                0      0       0       2        0.0%
ABS                  0      0       D       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50      0       0       5        0.0%
BITSFR2              0      0       0       5        0.0%
SFR2                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BANK1               50      0       0       7        0.0%
BITBANK3            60      0       0       8        0.0%
BANK3               60      0       0       9        0.0%
BITBANK2            60      0       0      10        0.0%
BANK2               60      0       0      11        0.0%
DATA                 0      0       D      12        0.0%


Microchip Technology PIC Macro Assembler V1.45 build -152302408 
Symbol Table                                                                                   Thu Feb 07 11:03:17 2019

                       _i 007B                         pc 0002               __CFG_CP$OFF 0000  
                      u25 066D                        u85 0643                        fsr 0004  
            ?_lcd_write_c 0070              ?_lcd_write_s 0070                       l706 07E6  
                     l672 0618                       l666 05ED                       l692 0799  
                     l684 0780                       _RD2 0042                       _RD3 0043  
                     u125 0797                       u207 0630                       u135 07E4  
                     u147 07AE                       u157 07C9                       u167 0680  
                     u177 0692              __CFG_CPD$OFF 0000                       u187 06A4  
                     u197 065A                       fsr0 0004              __CFG_IESO$ON 0000  
            __CFG_LVP$OFF 0000               lcd_pos@fila 0074                      STR_1 0009  
                    STR_2 0009              __CFG_WRT$OFF 0000             __CFG_FCMEN$ON 0000  
                    _main 0746                      btemp 007E             __CFG_BOREN$ON 0000  
                    start 0000             __CFG_MCLRE$ON 0000                     ?_main 0070  
           __CFG_WDTE$OFF 0000                     _PORTD 0008                     _TRISD 0088  
           __CFG_PWRTE$ON 0000           __end_of_lcd_cmd 0652           __end_of_lcd_ini 06D5  
         __end_of_lcd_pos 0629                     _setup 05E0                     pclath 000A  
                   status 0003                     wtemp0 007E           __initialization 07FA  
            __end_of_main 07FA                    ??_main 0078                    ?_setup 0070  
                  _ANSELH 0189                    _OSCCON 008F                 ??_lcd_cmd 0072  
               ??_lcd_ini 0074                 ??_lcd_pos 0078      __size_of_lcd_write_c 002A  
    __size_of_lcd_write_s 001C   __end_of__initialization 07FC             lcd_write_c@ch 0072  
           lcd_write_s@st 0074            __pcstackCOMMON 0070             __end_of_setup 05EC  
                 ??_setup 0070            lcd_pos@columna 0076                __pmaintext 0746  
              _lcd_custom 06D5                __stringtab 0003                   __ptext1 05E0  
                 __ptext2 05EC                   __ptext3 0608                   __ptext4 067C  
                 __ptext5 06D5                   __ptext6 0652                   __ptext7 0629  
                 _lcd_cmd 0629                   _lcd_ini 067C                   _lcd_pos 0608  
    end_of_initialization 07FC               ?_lcd_custom 0070                lcd_cmd@cmd 0070  
           ??_lcd_write_c 0070             ??_lcd_write_s 0073       start_initialization 07FA  
__CFG_FOSC$INTRC_NOCLKOUT 0000       __size_of_lcd_custom 0071               __pbssCOMMON 007B  
               ___latbits 0002       __end_of_lcd_write_c 067C       __end_of_lcd_write_s 0608  
               __pstrings 0003                  ?_lcd_cmd 0070                  ?_lcd_ini 0070  
                ?_lcd_pos 0074            __size_of_setup 000C               _lcd_write_c 0652  
             _lcd_write_s 05EC               __stringbase 0008              ??_lcd_custom 0074  
      __end_of_lcd_custom 0746        __end_of__stringtab 0009          __size_of_lcd_cmd 0029  
        __size_of_lcd_ini 0059          __size_of_lcd_pos 0021         __CFG_BOR4V$BOR40V 0000  
           __size_of_main 00B4                 stringcode 0003                  stringdir 0003  
                stringtab 0003  
