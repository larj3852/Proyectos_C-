

Microchip Technology PIC LITE Macro Assembler V1.45 build -152302408 
                                                                                               Mon Apr 23 03:41:16 2018

Microchip Technology Omniscient Code Generator v1.45 (Free mode) build 201711160504
     1                           	processor	16F887
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	cinit,global,class=CODE,merge=1,delta=2
     5                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
     6                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
     7                           	psect	maintext,global,class=CODE,split=1,delta=2
     8                           	psect	text1,local,class=CODE,merge=1,delta=2
     9                           	psect	text2,local,class=CODE,merge=1,delta=2
    10                           	psect	text3,local,class=CODE,merge=1,delta=2
    11                           	dabs	1,0x7E,2
    12  0000                     
    13                           ; Version 1.45
    14                           ; Generated 16/11/2017 GMT
    15                           ; 
    16                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    17                           ; All rights reserved.
    18                           ; 
    19                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    20                           ; 
    21                           ; Redistribution and use in source and binary forms, with or without modification, are
    22                           ; permitted provided that the following conditions are met:
    23                           ; 
    24                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    25                           ;        conditions and the following disclaimer.
    26                           ; 
    27                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    28                           ;        of conditions and the following disclaimer in the documentation and/or other
    29                           ;        materials provided with the distribution.
    30                           ; 
    31                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    32                           ;        software without specific prior written permission.
    33                           ; 
    34                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    35                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    36                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    37                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    38                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    39                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    40                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    41                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    42                           ; 
    43                           ; 
    44                           ; Code-generator required, PIC16F887 Definitions
    45                           ; 
    46                           ; SFR Addresses
    47  0000                     	;# 
    48  0001                     	;# 
    49  0002                     	;# 
    50  0003                     	;# 
    51  0004                     	;# 
    52  0005                     	;# 
    53  0006                     	;# 
    54  0007                     	;# 
    55  0008                     	;# 
    56  0009                     	;# 
    57  000A                     	;# 
    58  000B                     	;# 
    59  000C                     	;# 
    60  000D                     	;# 
    61  000E                     	;# 
    62  000E                     	;# 
    63  000F                     	;# 
    64  0010                     	;# 
    65  0011                     	;# 
    66  0012                     	;# 
    67  0013                     	;# 
    68  0014                     	;# 
    69  0015                     	;# 
    70  0015                     	;# 
    71  0016                     	;# 
    72  0017                     	;# 
    73  0018                     	;# 
    74  0019                     	;# 
    75  001A                     	;# 
    76  001B                     	;# 
    77  001B                     	;# 
    78  001C                     	;# 
    79  001D                     	;# 
    80  001E                     	;# 
    81  001F                     	;# 
    82  0081                     	;# 
    83  0085                     	;# 
    84  0086                     	;# 
    85  0087                     	;# 
    86  0088                     	;# 
    87  0089                     	;# 
    88  008C                     	;# 
    89  008D                     	;# 
    90  008E                     	;# 
    91  008F                     	;# 
    92  0090                     	;# 
    93  0091                     	;# 
    94  0092                     	;# 
    95  0093                     	;# 
    96  0093                     	;# 
    97  0093                     	;# 
    98  0094                     	;# 
    99  0095                     	;# 
   100  0096                     	;# 
   101  0097                     	;# 
   102  0098                     	;# 
   103  0099                     	;# 
   104  009A                     	;# 
   105  009B                     	;# 
   106  009C                     	;# 
   107  009D                     	;# 
   108  009E                     	;# 
   109  009F                     	;# 
   110  0105                     	;# 
   111  0107                     	;# 
   112  0108                     	;# 
   113  0109                     	;# 
   114  010C                     	;# 
   115  010C                     	;# 
   116  010D                     	;# 
   117  010E                     	;# 
   118  010F                     	;# 
   119  0185                     	;# 
   120  0187                     	;# 
   121  0188                     	;# 
   122  0189                     	;# 
   123  018C                     	;# 
   124  018D                     	;# 
   125  001E                     _ADRESH	set	30
   126  001F                     _ADCON0	set	31
   127  0005                     _PORTA	set	5
   128  00F9                     _GO	set	249
   129  009F                     _ADCON1	set	159
   130  009E                     _ADRESL	set	158
   131  0085                     _TRISA	set	133
   132  008F                     _OSCCON	set	143
   133  0189                     _ANSELH	set	393
   134  0188                     _ANSEL	set	392
   135                           
   136                           ; #config settings
   137  0000                     
   138                           	psect	cinit
   139  07FA                     start_initialization:	
   140  07FA                     __initialization:	
   141                           
   142                           ; Clear objects allocated to COMMON
   143  07FA  01F5               	clrf	__pbssCOMMON& (0+127)
   144  07FB  01F6               	clrf	(__pbssCOMMON+1)& (0+127)
   145  07FC                     end_of_initialization:	
   146                           ;End of C runtime variable initialization code
   147                           
   148  07FC                     __end_of__initialization:	
   149  07FC  0183               	clrf	3
   150  07FD  120A  118A  2FA1   	ljmp	_main	;jump to C main() function
   151                           
   152                           	psect	bssCOMMON
   153  0075                     __pbssCOMMON:	
   154  0075                     _A:	
   155  0075                     	ds	2
   156                           
   157                           	psect	cstackCOMMON
   158  0070                     __pcstackCOMMON:	
   159  0070                     ?_setup:	
   160  0070                     ??_setup:	
   161                           ; 1 bytes @ 0x0
   162                           
   163  0070                     ?_ADC_Init:	
   164                           ; 1 bytes @ 0x0
   165                           
   166  0070                     ??_ADC_Init:	
   167                           ; 1 bytes @ 0x0
   168                           
   169  0070                     ?_main:	
   170                           ; 1 bytes @ 0x0
   171                           
   172  0070                     ?_ADC_Read:	
   173                           ; 1 bytes @ 0x0
   174                           
   175                           
   176                           ; 2 bytes @ 0x0
   177  0070                     	ds	2
   178  0072                     ??_ADC_Read:	
   179                           
   180                           ; 1 bytes @ 0x2
   181  0072                     	ds	2
   182  0074                     ADC_Read@channel:	
   183                           
   184                           ; 1 bytes @ 0x4
   185  0074                     	ds	1
   186  0075                     ??_main:	
   187                           
   188                           	psect	maintext
   189  07A1                     __pmaintext:	
   190                           ; 1 bytes @ 0x5
   191 ;;
   192 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   193 ;;
   194 ;; *************** function _main *****************
   195 ;; Defined at:
   196 ;;		line 40 in file "Recording.c"
   197 ;; Parameters:    Size  Location     Type
   198 ;;		None
   199 ;; Auto vars:     Size  Location     Type
   200 ;;		None
   201 ;; Return value:  Size  Location     Type
   202 ;;                  1    wreg      void 
   203 ;; Registers used:
   204 ;;		wreg, status,2, status,0, pclath, cstack
   205 ;; Tracked objects:
   206 ;;		On entry : B00/0
   207 ;;		On exit  : 0/0
   208 ;;		Unchanged: 0/0
   209 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   210 ;;      Params:         0       0       0       0       0
   211 ;;      Locals:         0       0       0       0       0
   212 ;;      Temps:          0       0       0       0       0
   213 ;;      Totals:         0       0       0       0       0
   214 ;;Total ram usage:        0 bytes
   215 ;; Hardware stack levels required when called:    1
   216 ;; This function calls:
   217 ;;		_ADC_Init
   218 ;;		_ADC_Read
   219 ;;		_setup
   220 ;; This function is called by:
   221 ;;		Startup code after reset
   222 ;; This function uses a non-reentrant model
   223 ;;
   224                           
   225                           
   226                           ;psect for function _main
   227  07A1                     _main:	
   228                           
   229                           ;Recording.c: 41: setup();
   230                           
   231                           ;incstack = 0
   232                           ; Regs used in _main: [wreg+status,2+status,0+pclath+cstack]
   233  07A1  120A  118A  27B6  120A  118A  	fcall	_setup
   234                           
   235                           ;Recording.c: 42: ADC_Init();
   236  07A6  120A  118A  2799  120A  118A  	fcall	_ADC_Init
   237  07AB                     l35:	
   238                           ;Recording.c: 43: while(1){
   239                           
   240                           
   241                           ;Recording.c: 44: A=ADC_Read(0);
   242  07AB  3000               	movlw	0
   243  07AC  120A  118A  27D0  120A  118A  	fcall	_ADC_Read
   244  07B1  0871               	movf	?_ADC_Read+1,w
   245  07B2  00F6               	movwf	_A+1
   246  07B3  0870               	movf	?_ADC_Read,w
   247  07B4  00F5               	movwf	_A
   248  07B5  2FAB               	goto	l35
   249  07B6                     __end_of_main:	
   250                           
   251                           	psect	text1
   252  07B6                     __ptext1:	
   253 ;; *************** function _setup *****************
   254 ;; Defined at:
   255 ;;		line 48 in file "Recording.c"
   256 ;; Parameters:    Size  Location     Type
   257 ;;		None
   258 ;; Auto vars:     Size  Location     Type
   259 ;;		None
   260 ;; Return value:  Size  Location     Type
   261 ;;                  1    wreg      void 
   262 ;; Registers used:
   263 ;;		wreg, status,2
   264 ;; Tracked objects:
   265 ;;		On entry : 0/0
   266 ;;		On exit  : 0/0
   267 ;;		Unchanged: 0/0
   268 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   269 ;;      Params:         0       0       0       0       0
   270 ;;      Locals:         0       0       0       0       0
   271 ;;      Temps:          2       0       0       0       0
   272 ;;      Totals:         2       0       0       0       0
   273 ;;Total ram usage:        2 bytes
   274 ;; Hardware stack levels used:    1
   275 ;; This function calls:
   276 ;;		Nothing
   277 ;; This function is called by:
   278 ;;		_main
   279 ;; This function uses a non-reentrant model
   280 ;;
   281                           
   282                           
   283                           ;psect for function _setup
   284  07B6                     _setup:	
   285                           
   286                           ;Recording.c: 49: OSCCON = 0B01111000;
   287                           
   288                           ;incstack = 0
   289                           ; Regs used in _setup: [wreg+status,2]
   290  07B6  3078               	movlw	120
   291  07B7  1683               	bsf	3,5	;RP0=1, select bank1
   292  07B8  1303               	bcf	3,6	;RP1=0, select bank1
   293  07B9  008F               	movwf	15	;volatile
   294                           
   295                           ;Recording.c: 50: TRISA=0B00000001;
   296  07BA  3001               	movlw	1
   297  07BB  0085               	movwf	5	;volatile
   298                           
   299                           ;Recording.c: 51: ANSEL=0B00000001;
   300  07BC  3001               	movlw	1
   301  07BD  1683               	bsf	3,5	;RP0=1, select bank3
   302  07BE  1703               	bsf	3,6	;RP1=1, select bank3
   303  07BF  0088               	movwf	8	;volatile
   304                           
   305                           ;Recording.c: 52: ANSELH=0B0000000;
   306  07C0  0189               	clrf	9	;volatile
   307                           
   308                           ;Recording.c: 53: PORTA=0B0000000;
   309  07C1  1283               	bcf	3,5	;RP0=0, select bank0
   310  07C2  1303               	bcf	3,6	;RP1=0, select bank0
   311  07C3  0185               	clrf	5	;volatile
   312                           
   313                           ;Recording.c: 54: ADCON0=0B10000001;
   314  07C4  3081               	movlw	129
   315  07C5  009F               	movwf	31	;volatile
   316                           
   317                           ;Recording.c: 55: _delay((unsigned long)((5)*(8000000/4000)));
   318  07C6  300D               	movlw	13
   319  07C7  00F1               	movwf	??_setup+1
   320  07C8  30FB               	movlw	251
   321  07C9  00F0               	movwf	??_setup
   322  07CA                     u77:	
   323  07CA  0BF0               	decfsz	??_setup,f
   324  07CB  2FCA               	goto	u77
   325  07CC  0BF1               	decfsz	??_setup+1,f
   326  07CD  2FCA               	goto	u77
   327  07CE  2FCF               	nop2
   328  07CF  0008               	return
   329  07D0                     __end_of_setup:	
   330                           
   331                           	psect	text2
   332  07D0                     __ptext2:	
   333 ;; *************** function _ADC_Read *****************
   334 ;; Defined at:
   335 ;;		line 58 in file "Recording.c"
   336 ;; Parameters:    Size  Location     Type
   337 ;;  channel         1    wreg     unsigned char 
   338 ;; Auto vars:     Size  Location     Type
   339 ;;  channel         1    4[COMMON] unsigned char 
   340 ;; Return value:  Size  Location     Type
   341 ;;                  2    0[COMMON] unsigned int 
   342 ;; Registers used:
   343 ;;		wreg, status,2, status,0
   344 ;; Tracked objects:
   345 ;;		On entry : 0/0
   346 ;;		On exit  : 0/0
   347 ;;		Unchanged: 0/0
   348 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   349 ;;      Params:         2       0       0       0       0
   350 ;;      Locals:         1       0       0       0       0
   351 ;;      Temps:          2       0       0       0       0
   352 ;;      Totals:         5       0       0       0       0
   353 ;;Total ram usage:        5 bytes
   354 ;; Hardware stack levels used:    1
   355 ;; This function calls:
   356 ;;		Nothing
   357 ;; This function is called by:
   358 ;;		_main
   359 ;; This function uses a non-reentrant model
   360 ;;
   361                           
   362                           
   363                           ;psect for function _ADC_Read
   364  07D0                     _ADC_Read:	
   365                           
   366                           ;incstack = 0
   367                           ; Regs used in _ADC_Read: [wreg+status,2+status,0]
   368                           ;ADC_Read@channel stored from wreg
   369  07D0  00F4               	movwf	ADC_Read@channel
   370                           
   371                           ;Recording.c: 59: if(channel > 7)
   372  07D1  3008               	movlw	8
   373  07D2  0274               	subwf	ADC_Read@channel,w
   374  07D3  1C03               	skipc
   375  07D4  2FD8               	goto	l545
   376                           
   377                           ;Recording.c: 60: return 0;
   378  07D5  01F0               	clrf	?_ADC_Read
   379  07D6  01F1               	clrf	?_ADC_Read+1
   380  07D7  0008               	return
   381  07D8                     l545:	
   382                           
   383                           ;Recording.c: 62: ADCON0 &= 0xC5;
   384  07D8  30C5               	movlw	197
   385  07D9  00F2               	movwf	??_ADC_Read
   386  07DA  0872               	movf	??_ADC_Read,w
   387  07DB  1283               	bcf	3,5	;RP0=0, select bank0
   388  07DC  1303               	bcf	3,6	;RP1=0, select bank0
   389  07DD  059F               	andwf	31,f	;volatile
   390                           
   391                           ;Recording.c: 63: ADCON0 |= channel<<3;
   392  07DE  0874               	movf	ADC_Read@channel,w
   393  07DF  00F2               	movwf	??_ADC_Read
   394  07E0  3002               	movlw	2
   395  07E1                     u55:	
   396  07E1  1003               	clrc
   397  07E2  0DF2               	rlf	??_ADC_Read,f
   398  07E3  3EFF               	addlw	-1
   399  07E4  1D03               	skipz
   400  07E5  2FE1               	goto	u55
   401  07E6  1003               	clrc
   402  07E7  0D72               	rlf	??_ADC_Read,w
   403  07E8  00F3               	movwf	??_ADC_Read+1
   404  07E9  0873               	movf	??_ADC_Read+1,w
   405  07EA  049F               	iorwf	31,f	;volatile
   406                           
   407                           ;Recording.c: 64: _delay((unsigned long)((3)*(8000000/4000000)));
   408  07EB  2FEC               	nop2	;2 cycle nop
   409  07EC  2FED               	nop2	;2 cycle nop
   410  07ED  2FEE               	nop2	;2 cycle nop
   411                           
   412                           ;Recording.c: 65: GO = 1;
   413  07EE  1283               	bcf	3,5	;RP0=0, select bank0
   414  07EF  1303               	bcf	3,6	;RP1=0, select bank0
   415  07F0  149F               	bsf	31,1	;volatile
   416  07F1                     l46:	
   417                           ;Recording.c: 66: while(GO==1);
   418                           
   419  07F1  189F               	btfsc	31,1	;volatile
   420  07F2  2FF1               	goto	l46
   421                           
   422                           ;Recording.c: 67: return ((ADRESH<<8)+ADRESL);
   423  07F3  081E               	movf	30,w	;volatile
   424  07F4  00F1               	movwf	?_ADC_Read+1
   425  07F5  1683               	bsf	3,5	;RP0=1, select bank1
   426  07F6  1303               	bcf	3,6	;RP1=0, select bank1
   427  07F7  081E               	movf	30,w	;volatile
   428  07F8  00F0               	movwf	?_ADC_Read
   429  07F9  0008               	return
   430  07FA                     __end_of_ADC_Read:	
   431                           
   432                           	psect	text3
   433  0799                     __ptext3:	
   434 ;; *************** function _ADC_Init *****************
   435 ;; Defined at:
   436 ;;		line 70 in file "Recording.c"
   437 ;; Parameters:    Size  Location     Type
   438 ;;		None
   439 ;; Auto vars:     Size  Location     Type
   440 ;;		None
   441 ;; Return value:  Size  Location     Type
   442 ;;                  1    wreg      void 
   443 ;; Registers used:
   444 ;;		wreg, status,2
   445 ;; Tracked objects:
   446 ;;		On entry : 0/0
   447 ;;		On exit  : 0/0
   448 ;;		Unchanged: 0/0
   449 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   450 ;;      Params:         0       0       0       0       0
   451 ;;      Locals:         0       0       0       0       0
   452 ;;      Temps:          0       0       0       0       0
   453 ;;      Totals:         0       0       0       0       0
   454 ;;Total ram usage:        0 bytes
   455 ;; Hardware stack levels used:    1
   456 ;; This function calls:
   457 ;;		Nothing
   458 ;; This function is called by:
   459 ;;		_main
   460 ;; This function uses a non-reentrant model
   461 ;;
   462                           
   463                           
   464                           ;psect for function _ADC_Init
   465  0799                     _ADC_Init:	
   466                           
   467                           ;Recording.c: 71: ADCON0 = 0x81;
   468                           
   469                           ;incstack = 0
   470                           ; Regs used in _ADC_Init: [wreg+status,2]
   471  0799  3081               	movlw	129
   472  079A  1283               	bcf	3,5	;RP0=0, select bank0
   473  079B  1303               	bcf	3,6	;RP1=0, select bank0
   474  079C  009F               	movwf	31	;volatile
   475                           
   476                           ;Recording.c: 72: ADCON1 = 0x00;
   477  079D  1683               	bsf	3,5	;RP0=1, select bank1
   478  079E  1303               	bcf	3,6	;RP1=0, select bank1
   479  079F  019F               	clrf	31	;volatile
   480  07A0  0008               	return
   481  07A1                     __end_of_ADC_Init:	
   482  007E                     btemp	set	126	;btemp
   483  007E                     wtemp0	set	126


Data Sizes:
    Strings     0
    Constant    0
    Data        0
    BSS         2
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      5       7
    BANK0            80      0       0
    BANK1            80      0       0
    BANK3            96      0       0
    BANK2            96      0       0

Pointer List with Targets:

    None.

Critical Paths under _main in COMMON

    _main->_ADC_Read

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0      44
                           _ADC_Init
                           _ADC_Read
                              _setup
 ---------------------------------------------------------------------------------
 (1) _setup                                                2     2      0       0
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (1) _ADC_Read                                             5     3      2      44
                                              0 COMMON     5     3      2
 ---------------------------------------------------------------------------------
 (1) _ADC_Init                                             0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 1
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _ADC_Init
   _ADC_Read
   _setup

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMMON            E      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
COMMON               E      5       7       1       50.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
STACK                0      0       0       2        0.0%
ABS                  0      0       7       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50      0       0       5        0.0%
BITSFR2              0      0       0       5        0.0%
SFR2                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BANK1               50      0       0       7        0.0%
BITBANK3            60      0       0       8        0.0%
BANK3               60      0       0       9        0.0%
BITBANK2            60      0       0      10        0.0%
BANK2               60      0       0      11        0.0%
DATA                 0      0       7      12        0.0%


Microchip Technology PIC Macro Assembler V1.45 build -152302408 
Symbol Table                                                                                   Mon Apr 23 03:41:16 2018

                       _A 0075               __CFG_CP$OFF 0000                        l35 07AB  
                      l46 07F1                        _GO 00F9                        u55 07E1  
                      u77 07CA                       l545 07D8              __CFG_CPD$OFF 0000  
            __CFG_IESO$ON 0000              __CFG_LVP$OFF 0000              __CFG_WRT$OFF 0000  
           __CFG_FCMEN$ON 0000                      _main 07A1                      btemp 007E  
        __end_of_ADC_Init 07A1          __end_of_ADC_Read 07FA             __CFG_BOREN$ON 0000  
                    start 0000             __CFG_MCLRE$ON 0000                     ?_main 0070  
           __CFG_WDTE$OFF 0000                     _ANSEL 0188                     _PORTA 0005  
                   _TRISA 0085             __CFG_PWRTE$ON 0000                     _setup 07B6  
                   status 0003                     wtemp0 007E           __initialization 07FA  
            __end_of_main 07B6                    ??_main 0075                    _ADCON0 001F  
                  _ADCON1 009F                    _ADRESH 001E                    _ADRESL 009E  
                  ?_setup 0070                    _ANSELH 0189                    _OSCCON 008F  
         ADC_Read@channel 0074                 ?_ADC_Init 0070                 ?_ADC_Read 0070  
 __end_of__initialization 07FC            __pcstackCOMMON 0070             __end_of_setup 07D0  
              ??_ADC_Init 0070                ??_ADC_Read 0072                   ??_setup 0070  
              __pmaintext 07A1                   __ptext1 07B6                   __ptext2 07D0  
                 __ptext3 0799      end_of_initialization 07FC         __size_of_ADC_Init 0008  
       __size_of_ADC_Read 002A       start_initialization 07FA  __CFG_FOSC$INTRC_NOCLKOUT 0000  
             __pbssCOMMON 0075                 ___latbits 0002                  _ADC_Init 0799  
                _ADC_Read 07D0            __size_of_setup 001A         __CFG_BOR4V$BOR40V 0000  
           __size_of_main 0015  
